// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	httpservice "github.com/jeancarloshp/emites/internal/http_service"
	"github.com/jeancarloshp/emites/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockNfeRepository is an autogenerated mock type for the NfeRepository type
type MockNfeRepository struct {
	mock.Mock
}

type MockNfeRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNfeRepository) EXPECT() *MockNfeRepository_Expecter {
	return &MockNfeRepository_Expecter{mock: &_m.Mock}
}

// GetAllNfeByOrganizationId provides a mock function with given fields: organizationId, httpService
func (_m *MockNfeRepository) GetAllNfeByOrganizationId(organizationId int, httpService httpservice.HttpService) ([]domain.Nfe, error) {
	ret := _m.Called(organizationId, httpService)

	var r0 []domain.Nfe
	var r1 error
	if rf, ok := ret.Get(0).(func(int, httpservice.HttpService) ([]domain.Nfe, error)); ok {
		return rf(organizationId, httpService)
	}
	if rf, ok := ret.Get(0).(func(int, httpservice.HttpService) []domain.Nfe); ok {
		r0 = rf(organizationId, httpService)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Nfe)
		}
	}

	if rf, ok := ret.Get(1).(func(int, httpservice.HttpService) error); ok {
		r1 = rf(organizationId, httpService)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNfeRepository_GetAllNfeByOrganizationId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllNfeByOrganizationId'
type MockNfeRepository_GetAllNfeByOrganizationId_Call struct {
	*mock.Call
}

// GetAllNfeByOrganizationId is a helper method to define mock.On call
//   - organizationId int
//   - httpService httpservice.HttpService
func (_e *MockNfeRepository_Expecter) GetAllNfeByOrganizationId(organizationId interface{}, httpService interface{}) *MockNfeRepository_GetAllNfeByOrganizationId_Call {
	return &MockNfeRepository_GetAllNfeByOrganizationId_Call{Call: _e.mock.On("GetAllNfeByOrganizationId", organizationId, httpService)}
}

func (_c *MockNfeRepository_GetAllNfeByOrganizationId_Call) Run(run func(organizationId int, httpService httpservice.HttpService)) *MockNfeRepository_GetAllNfeByOrganizationId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(httpservice.HttpService))
	})
	return _c
}

func (_c *MockNfeRepository_GetAllNfeByOrganizationId_Call) Return(_a0 []domain.Nfe, _a1 error) *MockNfeRepository_GetAllNfeByOrganizationId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNfeRepository_GetAllNfeByOrganizationId_Call) RunAndReturn(run func(int, httpservice.HttpService) ([]domain.Nfe, error)) *MockNfeRepository_GetAllNfeByOrganizationId_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockNfeRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockNfeRepository creates a new instance of MockNfeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockNfeRepository(t mockConstructorTestingTNewMockNfeRepository) *MockNfeRepository {
	mock := &MockNfeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
