// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	httpservice "github.com/jeancarloshp/emites/internal/http_service"
	"github.com/jeancarloshp/emites/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockOrganizationUseCase is an autogenerated mock type for the OrganizationUseCase type
type MockOrganizationUseCase struct {
	mock.Mock
}

type MockOrganizationUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrganizationUseCase) EXPECT() *MockOrganizationUseCase_Expecter {
	return &MockOrganizationUseCase_Expecter{mock: &_m.Mock}
}

// GetAllNfes provides a mock function with given fields: httpService
func (_m *MockOrganizationUseCase) GetAllNfes(httpService httpservice.HttpService) ([]domain.Nfe, error) {
	ret := _m.Called(httpService)

	var r0 []domain.Nfe
	var r1 error
	if rf, ok := ret.Get(0).(func(httpservice.HttpService) ([]domain.Nfe, error)); ok {
		return rf(httpService)
	}
	if rf, ok := ret.Get(0).(func(httpservice.HttpService) []domain.Nfe); ok {
		r0 = rf(httpService)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Nfe)
		}
	}

	if rf, ok := ret.Get(1).(func(httpservice.HttpService) error); ok {
		r1 = rf(httpService)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrganizationUseCase_GetAllNfes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllNfes'
type MockOrganizationUseCase_GetAllNfes_Call struct {
	*mock.Call
}

// GetAllNfes is a helper method to define mock.On call
//   - httpService httpservice.HttpService
func (_e *MockOrganizationUseCase_Expecter) GetAllNfes(httpService interface{}) *MockOrganizationUseCase_GetAllNfes_Call {
	return &MockOrganizationUseCase_GetAllNfes_Call{Call: _e.mock.On("GetAllNfes", httpService)}
}

func (_c *MockOrganizationUseCase_GetAllNfes_Call) Run(run func(httpService httpservice.HttpService)) *MockOrganizationUseCase_GetAllNfes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(httpservice.HttpService))
	})
	return _c
}

func (_c *MockOrganizationUseCase_GetAllNfes_Call) Return(_a0 []domain.Nfe, _a1 error) *MockOrganizationUseCase_GetAllNfes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrganizationUseCase_GetAllNfes_Call) RunAndReturn(run func(httpservice.HttpService) ([]domain.Nfe, error)) *MockOrganizationUseCase_GetAllNfes_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllOrganizations provides a mock function with given fields: httpService
func (_m *MockOrganizationUseCase) GetAllOrganizations(httpService httpservice.HttpService) ([]domain.Organization, error) {
	ret := _m.Called(httpService)

	var r0 []domain.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(httpservice.HttpService) ([]domain.Organization, error)); ok {
		return rf(httpService)
	}
	if rf, ok := ret.Get(0).(func(httpservice.HttpService) []domain.Organization); ok {
		r0 = rf(httpService)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(httpservice.HttpService) error); ok {
		r1 = rf(httpService)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrganizationUseCase_GetAllOrganizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllOrganizations'
type MockOrganizationUseCase_GetAllOrganizations_Call struct {
	*mock.Call
}

// GetAllOrganizations is a helper method to define mock.On call
//   - httpService httpservice.HttpService
func (_e *MockOrganizationUseCase_Expecter) GetAllOrganizations(httpService interface{}) *MockOrganizationUseCase_GetAllOrganizations_Call {
	return &MockOrganizationUseCase_GetAllOrganizations_Call{Call: _e.mock.On("GetAllOrganizations", httpService)}
}

func (_c *MockOrganizationUseCase_GetAllOrganizations_Call) Run(run func(httpService httpservice.HttpService)) *MockOrganizationUseCase_GetAllOrganizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(httpservice.HttpService))
	})
	return _c
}

func (_c *MockOrganizationUseCase_GetAllOrganizations_Call) Return(_a0 []domain.Organization, _a1 error) *MockOrganizationUseCase_GetAllOrganizations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrganizationUseCase_GetAllOrganizations_Call) RunAndReturn(run func(httpservice.HttpService) ([]domain.Organization, error)) *MockOrganizationUseCase_GetAllOrganizations_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockOrganizationUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockOrganizationUseCase creates a new instance of MockOrganizationUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockOrganizationUseCase(t mockConstructorTestingTNewMockOrganizationUseCase) *MockOrganizationUseCase {
	mock := &MockOrganizationUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
